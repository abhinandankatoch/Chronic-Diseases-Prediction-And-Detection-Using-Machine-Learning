import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import pickle
import streamlit as st
from streamlit_option_menu import option_menu

#Loading the saved models created by Pickle in Jupyter Notebook
diabetes_model_1 = pickle.load(open('./MODEL_1.sav', 'rb'))
heartdisease_model_2 = pickle.load(open('./MODEL_2.sav', 'rb'))
parkinsons_model_3 = pickle.load(open('./MODEL_3.sav', 'rb'))
breastcancer_model_4 = pickle.load(open('./MODEL_4.sav', 'rb'))

#Creating Sidebar for Navigation
with st.sidebar:
    main_menu = option_menu('Chronic Diseases Prediction and Detection using Machine Learning',
                            ['Heart Disease Prediction Model',
                             'Breast Cancer Classification Model',
                             'Type - II Diabetes Prediction Model',
                             'Parkinsons Disease Detection Model',],
                             icons=['heart','gender-female','droplet-half','person-fill'],
                             default_index = 0)
    

#Heart Disease Prediction Model Page
if(main_menu == 'Heart Disease Prediction Model'):
    st.title('Heart Disease Prediction Model')
    st.write('NOTE : This machine learning model uses Logistic Regression algorithm to predict the likelihood of an individual having Cardiovascular Complications based on their medical test results. While the model has been trained to provide accurate results, it is important to remember that no model is perfect and it should not be relied on as the sole basis for medical decisions. It is strongly advised that individuals always consult with a qualified healthcare professional before making any decisions regarding their health or treatment.')
    st.write('Kindly Fill The Below Asked Parameters:')

    #MAIN PAGE CODE AND MODEL OUTPUT:
    c1,c2,c3,c4 = st.columns(4)
    with c1:
        age = st.text_input('Age')
    with c2:
        sex = st.text_input('Gender')
    with c3:
        cp = st.text_input('Chest Pain Value')
    with c4:
        trestbps = st.text_input('Blood Pressure (mmHg)')
    with c1:
        chol = st.text_input('Cholestrol Level (mg/dL)')
    with c2:
        fbs = st.text_input('Glucose Level (>120mg/dL)')
    with c3:
        restecg = st.text_input('Resting ECG')
    with c4:
        thalach = st.text_input('Maximum Heart Rate')
    with c1:
        exang = st.text_input('Exercise Induced Angina')
    with c2:
        oldpeak = st.text_input('ST Depression')
    with c3:
        slope = st.text_input('Peak ST Segment')
    with c4:
        ca = st.text_input('Major Vessels')
    with c1:
        thal = st.text_input('Thalassemia')
    
    diagnosis_output_1 = ''

    if st.button('Result'):
        diagnosis_pred_1 = heartdisease_model_2.predict([[age,sex,cp,trestbps,chol,fbs,restecg,thalach,exang,oldpeak,slope,ca,thal]])

        if (diagnosis_pred_1[0] == 1):
            diagnosis_output_1 = 'HEART WITH SOME CARDIOVASCULAR COMPLICATIONS. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Keep Your Heart Healthy - https://health.gov/myhealthfinder/health-conditions/heart-health/keep-your-heart-healthy'
        else:
            diagnosis_output_1 = 'HEALTHY HEART. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Keep Your Heart Healthy - https://health.gov/myhealthfinder/health-conditions/heart-health/keep-your-heart-healthy'
    st.success(diagnosis_output_1)

#Breast Cancer Classification Model Page
if(main_menu == 'Breast Cancer Classification Model'):
    st.title('Breast Cancer Classification Model')
    st.write('NOTE : This machine learning model uses Logistic Regression algorithm to classify the type of Breast Cancer Growth (Benign or Malignant) based on their medical test results. While the model has been trained to provide accurate results, it is important to remember that no model is perfect and it should not be relied on as the sole basis for medical decisions. It is strongly advised that individuals always consult with a qualified healthcare professional before making any decisions regarding their health or treatment.')
    st.write('Kindly Fill The Below Asked Parameters:')

    #MAIN PAGE CODE AND MODEL OUTPUT:
    c1,c2,c3,c4 = st.columns(4)
    with c1:
        mean_radius = st.text_input('Mean Radius')
    with c2:
        mean_texture = st.text_input('Mean Texture')
    with c3:
        mean_perimeter = st.text_input('Mean Perimeter')
    with c4:
        mean_area = st.text_input('Mean Area')
    with c1:
        mean_smoothness = st.text_input('Mean Smoothness')
    with c2:
        mean_compactness = st.text_input('Mean Compactness')
    with c3:
        mean_concavity = st.text_input('Mean Concavity')
    with c4:
        mean_concave_points = st.text_input('Mean Concave Points')
    with c1:
        mean_symmetry = st.text_input('Mean Symmetry')
    with c2:
        mean_fractal_dimension = st.text_input('Mean Fractal Dimension')
    with c3:
        radius_error = st.text_input('Radius Error')
    with c4:
        texture_error = st.text_input('Texture Error')
    with c1:
        perimeter_error = st.text_input('Perimeter Error')
    with c2:
        area_error = st.text_input('Area Error')
    with c3:
        smoothness_error = st.text_input('Smoothness Error')
    with c4:
        compactness_error = st.text_input('Compactness Error')
    with c1:
        concavity_error = st.text_input('Concavity Error')
    with c2:
        concave_points_error = st.text_input('Concave Points Error')
    with c3:
        symmetry_error = st.text_input('Symmetry Error')
    with c4:
        fractal_dimension_error = st.text_input('Fractal Dimension Error')
    with c1:
        worst_radius = st.text_input('Worst Radius')
    with c2:
        worst_texture = st.text_input('Worst Texture')
    with c3:
        worst_perimeter = st.text_input('Worst Perimeter')
    with c4:
        worst_area = st.text_input('Worst Area')
    with c1:
        worst_smoothness = st.text_input('Worst Smoothness')
    with c2:
        worst_compactness = st.text_input('Worst Compactness')
    with c3:
        worst_concavity = st.text_input('Worst Concavity')
    with c4:
        worst_concave_points = st.text_input('Worst Concave Points')
    with c1:
        worst_symmetry = st.text_input('Worst Symmetry')
    with c2:
        worst_fractal_dimension = st.text_input('Worst Fractal Dimension')

    diagnosis_output_4 = ''

    if st.button('Result'):
        diagnosis_pred_4 = breastcancer_model_4.predict([[mean_radius,mean_texture,mean_perimeter,mean_area,mean_smoothness,mean_compactness,mean_concavity,mean_concave_points,mean_symmetry,mean_fractal_dimension,radius_error,texture_error,perimeter_error,area_error,smoothness_error,compactness_error,concavity_error,concave_points_error,symmetry_error,fractal_dimension_error,worst_radius,worst_texture,worst_perimeter,worst_area,worst_smoothness,worst_compactness,worst_concavity,worst_concave_points,worst_symmetry,worst_fractal_dimension]])

        if (diagnosis_pred_4[0] == 1):
            diagnosis_output_4 = 'CANCER GROWTH TYPE IS BENING. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Know more about Bening form of Cancer - https://www.webmd.com/a-to-z-guides/benign-tumors-causes-treatments.'
        else:
            diagnosis_output_4 = 'CANCER GROWTH TYPE IS MALIGNANT. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Know more about Malignant form of Cancer - https://my.clevelandclinic.org/health/diseases/22319-malignant-neoplasm.'
    st.success(diagnosis_output_4)

#Type - II Diabetes Prediction Model Page
if(main_menu == 'Type - II Diabetes Prediction Model'):
    st.title('Type - II Diabetes Prediction Model')
    st.write('NOTE : This machine learning model uses Decision Tree Classifier algorithm to predict the likelihood of an individual having Type-II Diabetes based on their medical test results. While the model has been trained to provide accurate results, it is important to remember that no model is perfect and it should not be relied on as the sole basis for medical decisions. It is strongly advised that individuals always consult with a qualified healthcare professional before making any decisions regarding their health or treatment.')
    st.write('Kindly Fill The Below Asked Parameters:')

    #MAIN PAGE CODE AND MODEL OUTPUT:
    c1,c2,c3 = st.columns(3)
    with c1:
        Pregnancies = st.text_input('Number of Pregnancies')
    with c2:
        Glucose = st.text_input('Sugar Level in Blood (mg/dL)')
    with c3:
        BloodPressure = st.text_input('Blood Pressure Level (mmHg)')
    with c1:
        SkinThickness = st.text_input('Skin Thickness (mm)')
    with c2:
        Insulin = st.text_input('Insulin Level in Blood (mcU/mL)')
    with c3:
        BMI = st.text_input('Body Mass Index Value')
    with c1:
        DiabetesPedigreeFunction = st.text_input('Diabetes Pedigree Function Value')  
    with c2:
        Age = st.text_input('Age')

    diagnosis_output_3 = ''

    if st.button('Result'):
        diagnosis_pred_3 = diabetes_model_1.predict([[Pregnancies,Glucose,BloodPressure,SkinThickness,Insulin,BMI,DiabetesPedigreeFunction,Age]])

        if (diagnosis_pred_3[0] == 1):
            diagnosis_output_3 = 'DIABETIC. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Know more about Type - II Diabetes - https://www.mayoclinic.org/diseases-conditions/type-2-diabetes/symptoms-causes/syc-20351193.'
        else:
            diagnosis_output_3 = 'NOT DIABETIC. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Type - II Diabetes Prevention - https://www.mayoclinic.org/diseases-conditions/type-2-diabetes/in-depth/diabetes-prevention/art-20047639.'
    st.success(diagnosis_output_3)

#Parkinsons Disease Detection Model Page
if(main_menu == 'Parkinsons Disease Detection Model'):
    st.title('Parkinsons Disease Detection Model')
    st.write('NOTE : This machine learning model uses Decision Tree Classifier algorithm to predict the likelihood of an individual having Parkinsons Disease based on their medical test results. While the model has been trained to provide accurate results, it is important to remember that no model is perfect and it should not be relied on as the sole basis for medical decisions. It is strongly advised that individuals always consult with a qualified healthcare professional before making any decisions regarding their health or treatment.')
    st.write('Kindly Fill The Below Asked Parameters:')

    #MAIN PAGE CODE AND MODEL OUTPUT:
    c1,c2,c3,c4,c5 = st.columns(5)
    with c1:
        fo =  st.text_input('MDVP-Fo(Hz)')
    with c2:
        fhi = st.text_input('MDVP-Fhi(Hz)')
    with c3:
        flo = st.text_input('MDVP-Flo(Hz)')
    with c4:
        Jitter_percent = st.text_input('MDVP-Jitter(%)')
    with c5:
        Jitter_Abs = st.text_input('MDVP-Jitter(Abs)')
    with c1:
        RAP = st.text_input('MDVP-RAP')
    with c2:
        PPQ = st.text_input('MDVP-PPQ')
    with c3:
        DDP = st.text_input('MDVP-DDP')
    with c4:
        Shimmer = st.text_input('MDVP-Shimmer')
    with c5:
        Shimmer_dB = st.text_input('MDVP-Shimmer(dB)')
    with c1:
        APQ3 = st.text_input('Shimmer-APQ3')
    with c2:
        APQ5 = st.text_input('Shimmer-APQ5')
    with c3:
        APQ = st.text_input('MDVP-APQ')
    with c4:
        DDA = st.text_input('Shimmer-DDA')
    with c5:
        NHR = st.text_input('NHR')
    with c1:
        HNR = st.text_input('HNR')
    with c2:
        RPDE = st.text_input('RPDE')
    with c3:
        DFA = st.text_input('DFA') 
    with c4:
        spread1 = st.text_input('spread1')
    with c5:
        spread2 = st.text_input('spread2')
    with c1:
        D2 = st.text_input('D2')
    with c2:
        PPE = st.text_input('PPE')

    diagnosis_output_2 = ''

    if st.button('Result'):
        diagnosis_pred_2 = parkinsons_model_3.predict([[fo,fhi,flo,Jitter_Abs,Jitter_percent,RAP,PPQ,DDP,Shimmer,Shimmer_dB,APQ3,APQ5,APQ,DDA,NHR,HNR,RPDE,DFA,spread1,spread2,D2,PPE]])

        if (diagnosis_pred_2[0] == 0):
            diagnosis_output_2 = 'PARKINSONS NEGATIVE. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Know more about Parkinsons Disease - https://www.mayoclinic.org/diseases-conditions/parkinsons-disease/symptoms-causes/syc-20376055.'
        else:
            diagnosis_output_2 = 'PARKINSONS POSITIVE. The displayed outcome is entirely reliant on the information furnished by the user and the forecast generated by a machine learning model. It is important to note that it is imperative to seek guidance from healthcare professionals in all medical matters. Know more about Parkinsons Disease - https://www.mayoclinic.org/diseases-conditions/parkinsons-disease/symptoms-causes/syc-20376055.'
    st.success(diagnosis_output_2)